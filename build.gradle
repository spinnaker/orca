/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  ext {
    korkVersion = "4.0.2"
    keikoVersion = "2.10.0"
  }
  repositories {
    jcenter()
    maven { url "https://spinnaker.bintray.com/gradle" }
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath "com.netflix.spinnaker.gradle:spinnaker-dev-plugin:5.2.2"
    classpath "com.netflix.nebula:nebula-kotlin-plugin:1.3.30"
    classpath "org.jetbrains.kotlin:kotlin-allopen:1.3.30"
  }
}

allprojects {
  apply plugin: "spinnaker.base-project"
  apply plugin: "java-library"
  group = "com.netflix.spinnaker.orca"

  test {
    testLogging {
      exceptionFormat = 'full'
    }
  }
  
  def useLocalMaven = korkVersion.endsWith('-SNAPSHOT')
  if (useLocalMaven) {
    logger.info("Enabling mavenLocal")
    repositories {
      mavenLocal()
    }
  }
  
  tasks.withType(JavaExec) {
    if (System.getProperty('DEBUG', 'false') == 'true') {
      jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8183'
    }
  }
}

subprojects {
  def licenseExtension = project.extensions.findByName('license')
  if (licenseExtension != null) {
    licenseExtension.exclude "**/*.json"
    licenseExtension.exclude "**/*.md"
    licenseExtension.exclude "**/*.yml"
    licenseExtension.mapping {
      java = "SLASHSTAR_STYLE"
      kt = "SLASHSTAR_STYLE"
    }
  }

  //c&p this because NetflixOss reverts it to 1.7 and ends up getting applied last..
  project.plugins.withType(JavaPlugin) {
    JavaPluginConvention convention = project.convention.getPlugin(JavaPluginConvention)
    convention.sourceCompatibility = JavaVersion.VERSION_1_8
    convention.targetCompatibility = JavaVersion.VERSION_1_8
  }
  repositories {
    jcenter()
  }
  dependencies {
    implementation platform("com.netflix.spinnaker.kork:kork-bom:$korkVersion")
    annotationProcessor platform("com.netflix.spinnaker.kork:kork-bom:$korkVersion")
    testAnnotationProcessor platform("com.netflix.spinnaker.kork:kork-bom:$korkVersion")
  }
}

defaultTasks ":orca-web:run"
