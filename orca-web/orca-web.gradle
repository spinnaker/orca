/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: "$rootDir/gradle/groovy.gradle"
apply plugin: 'spinnaker.application'

ext {
  springConfigLocation = System.getProperty('spring.config.additional-location', "${System.getProperty('user.home')}/.spinnaker/")
}

run {
  systemProperty('spring.config.additional-location', project.springConfigLocation)
}

mainClassName = 'com.netflix.spinnaker.orca.Main'

dependencies {
  implementation("org.springframework.boot:spring-boot-starter-web")
  implementation("org.springframework.boot:spring-boot-starter-actuator")
  implementation("net.logstash.logback:logstash-logback-encoder")

  implementation(project(":orca-core"))
  implementation(project(":orca-redis"))
  implementation(project(":orca-bakery"))
  implementation(project(":orca-clouddriver"))
  implementation(project(":orca-front50"))
  implementation(project(":orca-applications"))
  implementation(project(":orca-flex"))
  implementation(project(":orca-dry-run"))
  implementation(project(":orca-echo"))
  implementation(project(":orca-extensionpoint"))
  implementation(project(":orca-kayenta"))
  implementation(project(":orca-mine"))
  implementation(project(":orca-igor"))
  implementation(project(":orca-webhook"))
  implementation(project(":orca-eureka"))
  implementation(project(":orca-queue-redis"))
  implementation(project(":orca-pipelinetemplate"))
  implementation(project(":orca-keel"))
  implementation(project(":orca-qos"))
  implementation(project(":orca-migration"))
  implementation(project(":orca-sql"))
  implementation(project(":orca-sql-mysql"))
  implementation(project(":orca-integrations-cloudfoundry"))
  implementation(project(":orca-integrations-gremlin"))
  implementation("com.netflix.spinnaker.kork:kork-exceptions")
  implementation("com.netflix.spinnaker.kork:kork-stackdriver")
  implementation("com.netflix.spinnaker.kork:kork-web")
  implementation("net.logstash.logback:logstash-logback-encoder")
  implementation("com.netflix.spinnaker.fiat:fiat-api:$fiatVersion")
  implementation("com.netflix.spinnaker.fiat:fiat-core:$fiatVersion")

  compileOnly("org.projectlombok:lombok")
  annotationProcessor("org.projectlombok:lombok")

  runtimeOnly("com.netflix.spinnaker.kork:kork-core")
  runtimeOnly("com.netflix.spinnaker.kork:kork-secrets-aws")
  //this brings in the jetty GzipFilter which boot will autoconfigure
  runtimeOnly("org.eclipse.jetty:jetty-servlets:9.2.11.v20150529")

  testImplementation(project(":orca-test-groovy"))
  testImplementation("org.springframework.boot:spring-boot-starter-test")
  testImplementation("org.spockframework:spock-core")
  testImplementation("org.spockframework:spock-spring")
  testImplementation("org.springframework:spring-test")
  testImplementation("cglib:cglib-nodep")
  testImplementation("org.objenesis:objenesis")
  testImplementation("junit:junit")
  testImplementation("org.hamcrest:hamcrest-core:1.3")
  testImplementation("com.netflix.spinnaker.keiko:keiko-mem:$keikoVersion")
}
