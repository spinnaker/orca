/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'spring-boot'
apply plugin: 'nebula.ospackage'

ext {
  springConfigLocation = System.getProperty('spring.config.location', "${System.getProperty('user.home')}/.spinnaker/")
}

tasks.withType(org.springframework.boot.gradle.run.BootRunTask) {
  systemProperty('spring.config.location', project.springConfigLocation)
}

springBoot {
    mainClass = 'com.netflix.spinnaker.orca.Main'
}

dependencies {
  spinnaker.group("bootWeb")

  compile project(":orca-bakery")
  compile project(":orca-clouddriver")
  compile project(":orca-front50")
  compile project(":orca-applications")
  compile project(":orca-flex")
  compile project(":orca-echo")
  compile project(":orca-mine")
  compile project(":orca-mahe")
  compile project(":orca-rush")
  compile project(":orca-igor")
  compile project(":orca-eureka")
  compile project(":orca-tide")

//  Replace below with this line when fiat becomes stable.
//  spinnaker.group "fiat"
  compile "com.netflix.spinnaker.fiat:fiat-api:0.8.0"
  compile "org.springframework.boot:spring-boot-starter-actuator:1.2.8.RELEASE"
  compile "org.springframework.boot:spring-boot-starter-web:1.2.8.RELEASE"
  compile "org.springframework.boot:spring-boot-starter-data-rest:1.2.8.RELEASE"
  compile "org.springframework.security:spring-security-config:3.2.9.RELEASE"
  compile "org.springframework.security:spring-security-core:3.2.9.RELEASE"
  compile "org.springframework.security:spring-security-web:3.2.9.RELEASE"

  runtime spinnaker.dependency("kork")
  compile spinnaker.dependency("korkWeb")

  spinnaker.group('test')
  testCompile spinnaker.dependency('batchTest')
  testCompile project(":orca-test")

  //this brings in the jetty GzipFilter which boot will autoconfigure
  runtime 'org.eclipse.jetty:jetty-servlets:9.2.11.v20150529'
}

applicationName = 'orca'
applicationDefaultJvmArgs = ["-Djava.security.egd=file:/dev/./urandom"]
applicationDistribution.from(project.file('config')) {
  into "config"
}

sourceSets {
  main {
    resources {
      srcDir 'src/main/resources'
      srcDir 'config'
    }
  }
}

jar {
  doFirst {
    exclude "${rootProject.name}.yml"
  }
}

startScripts {
  defaultJvmOpts = applicationDefaultJvmArgs + ["-Dspring.config.location=/opt/spinnaker/config/"]
  doLast {
    unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=', '''\
        if [ -f /etc/default/spinnaker ]; then
          set -a
          . /etc/default/spinnaker
          set +a
        fi
        DEFAULT_JVM_OPTS='''.stripIndent())
    unixScript.text = unixScript.text.replace('CLASSPATH=$APP_HOME', 'CLASSPATH=$APP_HOME/config:$APP_HOME')
    windowsScript.text = windowsScript.text.replace('set CLASSPATH=', 'set CLASSPATH=%APP_HOME%\\config;')
  }
}

String toVers(String v) {
  int idx = v.indexOf('-')
  if (idx != -1) {
    return v.substring(0, idx)
  }
  return v
}

ospackage {
  packageName = "spinnaker-" + project.applicationName
  version = toVers(project.version.toString())
  release '3'
  os = LINUX
  // installer scripts
  postInstall = file('pkg_scripts/postInstall.sh')
  postUninstall = file('pkg_scripts/postUninstall.sh')

  from "${project.buildDir}/install/${project.applicationName}"
    into "/opt/${project.applicationName}"

  from(file('etc/init/orca.conf')) {
    into('/etc/init')
    user = 'root'
    permissionGroup = 'root'
    fileType = CONFIG | NOREPLACE
  }

  from(file('etc/logrotate.d/orca')) {
    into('/etc/logrotate.d')
    user = 'root'
    permissionGroup = 'root'
    fileMode = 0644
    fileType = CONFIG | NOREPLACE
  }
}

buildDeb {
  dependsOn installDist
}

